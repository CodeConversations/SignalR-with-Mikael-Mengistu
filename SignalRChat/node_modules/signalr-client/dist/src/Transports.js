var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TransportType;
    (function (TransportType) {
        TransportType[TransportType["WebSockets"] = 0] = "WebSockets";
        TransportType[TransportType["ServerSentEvents"] = 1] = "ServerSentEvents";
        TransportType[TransportType["LongPolling"] = 2] = "LongPolling";
    })(TransportType = exports.TransportType || (exports.TransportType = {}));
    class WebSocketTransport {
        connect(url, queryString = "") {
            return new Promise((resolve, reject) => {
                url = url.replace(/^http/, "ws");
                let webSocket = new WebSocket(url);
                webSocket.onopen = (event) => {
                    console.log(`WebSocket connected to ${url}`);
                    this.webSocket = webSocket;
                    resolve();
                };
                webSocket.onerror = (event) => {
                    reject();
                };
                webSocket.onmessage = (message) => {
                    console.log(`(WebSockets transport) data received: ${message.data}`);
                    if (this.onDataReceived) {
                        this.onDataReceived(message.data);
                    }
                };
                webSocket.onclose = (event) => {
                    // webSocket will be null if the transport did not start successfully
                    if (this.onClosed && this.webSocket) {
                        if (event.wasClean === false || event.code !== 1000) {
                            this.onClosed(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));
                        }
                        else {
                            this.onClosed();
                        }
                    }
                };
            });
        }
        send(data) {
            if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {
                this.webSocket.send(data);
                return Promise.resolve();
            }
            return Promise.reject("WebSocket is not in the OPEN state");
        }
        stop() {
            if (this.webSocket) {
                this.webSocket.close();
                this.webSocket = null;
            }
        }
    }
    exports.WebSocketTransport = WebSocketTransport;
    class ServerSentEventsTransport {
        constructor(httpClient) {
            this.httpClient = httpClient;
        }
        connect(url) {
            if (typeof (EventSource) === "undefined") {
                Promise.reject("EventSource not supported by the browser.");
            }
            this.url = url;
            return new Promise((resolve, reject) => {
                let eventSource = new EventSource(this.url);
                try {
                    eventSource.onmessage = (e) => {
                        if (this.onDataReceived) {
                            try {
                                console.log(`(SSE transport) data received: ${e.data}`);
                                this.onDataReceived(e.data);
                            }
                            catch (error) {
                                if (this.onClosed) {
                                    this.onClosed(error);
                                }
                                return;
                            }
                        }
                    };
                    eventSource.onerror = (e) => {
                        reject();
                        // don't report an error if the transport did not start successfully
                        if (this.eventSource && this.onClosed) {
                            this.onClosed(new Error(e.message || "Error occurred"));
                        }
                    };
                    eventSource.onopen = () => {
                        console.log(`SSE connected to ${this.url}`);
                        this.eventSource = eventSource;
                        resolve();
                    };
                }
                catch (e) {
                    return Promise.reject(e);
                }
            });
        }
        send(data) {
            return __awaiter(this, void 0, void 0, function* () {
                return send(this.httpClient, this.url, data);
            });
        }
        stop() {
            if (this.eventSource) {
                this.eventSource.close();
                this.eventSource = null;
            }
        }
    }
    exports.ServerSentEventsTransport = ServerSentEventsTransport;
    class LongPollingTransport {
        constructor(httpClient) {
            this.httpClient = httpClient;
        }
        connect(url) {
            this.url = url;
            this.shouldPoll = true;
            this.poll(this.url);
            return Promise.resolve();
        }
        poll(url) {
            if (!this.shouldPoll) {
                return;
            }
            let pollXhr = new XMLHttpRequest();
            pollXhr.onload = () => {
                if (pollXhr.status == 200) {
                    if (this.onDataReceived) {
                        try {
                            if (pollXhr.response) {
                                console.log(`(LongPolling transport) data received: ${pollXhr.response}`);
                                this.onDataReceived(pollXhr.response);
                            }
                            else {
                                console.log(`(LongPolling transport) timed out`);
                            }
                        }
                        catch (error) {
                            if (this.onClosed) {
                                this.onClosed(error);
                            }
                            return;
                        }
                    }
                    this.poll(url);
                }
                else if (this.pollXhr.status == 204) {
                    if (this.onClosed) {
                        this.onClosed();
                    }
                }
                else {
                    if (this.onClosed) {
                        this.onClosed(new Error(`Status: ${pollXhr.status}, Message: ${pollXhr.responseText}`));
                    }
                }
            };
            pollXhr.onerror = () => {
                if (this.onClosed) {
                    // network related error or denied cross domain request
                    this.onClosed(new Error("Sending HTTP request failed."));
                }
            };
            pollXhr.ontimeout = () => {
                this.poll(url);
            };
            this.pollXhr = pollXhr;
            this.pollXhr.open("GET", url, true);
            // TODO: consider making timeout configurable
            this.pollXhr.timeout = 120000;
            this.pollXhr.send();
        }
        send(data) {
            return __awaiter(this, void 0, void 0, function* () {
                return send(this.httpClient, this.url, data);
            });
        }
        stop() {
            this.shouldPoll = false;
            if (this.pollXhr) {
                this.pollXhr.abort();
                this.pollXhr = null;
            }
        }
    }
    exports.LongPollingTransport = LongPollingTransport;
    const headers = new Map();
    function send(httpClient, url, data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield httpClient.post(url, data, headers);
        });
    }
});
